tomcat配置
	1、修改E:\Develop\apache-tomcat-8.0.53\conf\tomcat-users.xml配置文件，最后添加如下内容
		<role rolename="manager-gui"/>
		<role rolename="manager-script"/>
		<user username="root" password="root" roles="manager-script"/>
		<user username="admin" password="admin" roles="manager-gui"/>
	2、在E:\Develop\apache-tomcat-8.0.53\conf\Catalina\localhost目录下新建manager.xml文件，添加如下内容
		<?xml version="1.0" encoding="UTF-8"?>
		<Context privileged="true" antiResourceLocking="false"
				 docBase="${catalina.home}/webapps/manager">
					 <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="^.*$" />
		</Context>
	3、启动tomcat，访问manager，用户名密码为第一步配置的roles="manager-gui"的用户名密码

1、打包方式为war
2、修改web启动以来
	1》剔除tomcat依赖
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<exclusions>
		<exclusion>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
		</exclusion>
	</exclusions>
</dependency>
	或者修改web启动模块的作用域为provided
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-web</artifactId>
	<scope>provided</scope>
</dependency>

3、远程部署插件
<plugin>
	<groupId>org.apache.tomcat.maven</groupId>
	<artifactId>tomcat7-maven-plugin</artifactId>
	<version>2.2</version>
	<configuration>
		<url>http://localhost:8080/manager/text</url>
		<username>root</username>
		<password>root</password>
		<update>true</update>
		<path>/</path>
	</configuration>
</plugin>

4、添加插件在没有web.xml构建war包
<plugin>
	<artifactId>maven-war-plugin</artifactId>
	<version>2.6</version>
	<configuration>
		<!--如果想在没有web.xml文件的情况下构建WAR，请设置为false。-->
		<failOnMissingWebXml>false</failOnMissingWebXml>
	</configuration>
</plugin>

5、项目中使用servlet添加依赖（如果项目后台部分中使用到了servlet api部分需要添加如下依赖。反之可不添加）
<!--添加servlet-api的依赖-->
<dependency>
	<groupId>javax.servlet</groupId>
	<artifactId>javax.servlet-api</artifactId>
	<version>3.1.0</version>
	<scope>provided</scope>
</dependency>
<dependency>
	<groupId>org.apache.tomcat</groupId>
	<artifactId>tomcat-servlet-api</artifactId>
	<version>8.0.36</version>
	<scope>provided</scope>
</dependency>

6、修改启动类，继承SpringBootServletInitializer类重写configure方法
@SpringBootApplication
public class JizhuiApplication extends SpringBootServletInitializer {

    public static void main(String[] args) {
        SpringApplication.run(JizhuiApplication.class, args);
    }
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {
        return builder.sources(JizhuiApplication.class);
    }
}